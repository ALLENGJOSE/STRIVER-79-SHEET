
Brute Force approach:
import java.util.*;

public class tUf {
    public static List<List<Integer>> triplet(int n, int[] arr) {
        Set<List<Integer>> st = new HashSet<>();

        // check all possible triplets:
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (arr[i] + arr[j] + arr[k] == 0) {
                        List<Integer> temp = Arrays.asList(arr[i], arr[j], arr[k]);
                        temp.sort(null);
                        st.add(temp);
                    }
                }
            }
        }
          // store the set elements in the answer:
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }
    }
 Time Complexity: O(N3 * log(no. of unique triplets)), where N = size of the array.
Reason: Here, we are mainly using 3 nested loops. And inserting triplets into the set takes O(log(no. of unique triplets)) time complexity. But we are not considering the time complexity of sorting as we are just sorting 3 elements every time.

Space Complexity: O(2 * no. of the unique triplets) as we are using a set data structure and a list to store the triplets.

Better Approach:
lass Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        Set<List<Integer>> st = new HashSet<>();
        int n=nums.length;
        for(int i=0;i<n;i++){
            Set<Integer> hashset = new HashSet<>(); // reinitialize the set after moving i every time
        for(int j=i+1;j<n;j++){
            int third = -(nums[i]+nums[j]); // calculate the third element
            //find the third element in the set
            if(hashset.contains(third)){
                List<Integer> temp = Arrays.asList(nums[i],nums[j],third);
                temp.sort(null);
                st.add(temp);
            }
            hashset.add(nums[j]);
        }
        }
        //store the set elements in the answer
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }
}
Time Complexity: O(N2 * log(no. of unique triplets)), where N = size of the array.
Reason: Here, we are mainly using 3 nested loops. And inserting triplets into the set takes O(log(no. of unique triplets)) time complexity. But we are not considering the time complexity of sorting as we are just sorting 3 elements every time.

Space Complexity: O(2 * no. of the unique triplets) + O(N) as we are using a set data structure and a list to store the triplets and extra O(N) for storing the array elements in another set.

Optimal Approach:
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(nums);  //pehle sort kre
        int n = nums.length;
        for(int i=0;i<n;i++){
            //remove duplicates 
            if(i!=0 && nums[i]==nums[i-1]) continue; // matlab keep moving i  pointer    

            //move 2 pointers
            int j =i+1;
            int k =n-1;
            while(j<k){ // they dont cross
                int sum = nums[i]+nums[j]+nums[k];
                if(sum<0){.  
                    j++;
                }else if(sum>0){
                    k--;
                }else{
                    List<Integer> temp = Arrays.asList(nums[i],nums[j],nums[k]);
                    //we have found the triplet
                    ans.add(temp);
                    j++;
                    k--;
                    //skip the duplicates
                    while(j<k && nums[j]==nums[j-1]) j++;
                    while(j<k && nums[k]==nums[k+1]) k--;
                }
            }
        }
        return ans;
    }
}
TC:O(NLOFN)+(N^2)
SC:O(1)
